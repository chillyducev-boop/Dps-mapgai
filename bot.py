import os
import json
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.environ.get("BOT_TOKEN")
PUBLISH_CHAT_ID = int(os.environ.get("PUBLISH_CHAT_ID"))
MIN_NO_TO_MARK_GONE = int(os.environ.get("MIN_NO_TO_MARK_GONE"))
GONE_LIFETIME_MINUTES = int(os.environ.get("GONE_LIFETIME_MINUTES"))
YANDEX_API_KEY = os.environ.get("YANDEX_API_KEY")

DATA_FILE = "points.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        points = json.load(f)
else:
    points = []

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")],
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", request_location=True)]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ—á–∫—É –î–ü–°:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_location = update.message.location
    context.user_data["lat"] = user_location.latitude
    context.user_data["lon"] = user_location.longitude
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç)
async def manual_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –î–ü–° –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–î–ü–° –Ω–∞ —Ç—Ä–∞—Å—Å–µ, 53.1959, 50.1008"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.startswith("–î–ü–°"):
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
            desc, lat, lon = map(str.strip, text.split(","))
            lat = float(lat)
            lon = float(lon)
        except:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: –î–ü–° –Ω–∞ —Ç—Ä–∞—Å—Å–µ, 53.1959, 50.1008")
            return
    else:
        lat = context.user_data.get("lat")
        lon = context.user_data.get("lon")
        desc = text
        if not lat or not lon:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            return

    point_id = len(points) + 1
    expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)
    new_point = {
        "id": point_id,
        "lat": lat,
        "lon": lon,
        "desc": desc,
        "yes": 1,
        "no": 0,
        "expire": expire_time.isoformat()
    }
    points.append(new_point)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
    map_url = f"https://yandex.ru/maps/?ll={lon}%2C{lat}&z=14&pt={lon}%2C{lat},pm2rdm"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
         InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç", callback_data=f"no_{point_id}")]
    ]

    await context.bot.send_message(
        chat_id=PUBLISH_CHAT_ID,
        text=f"üöì {desc}\nüìç {map_url}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, pid = query.data.split("_")
    pid = int(pid)

    for point in points:
        if point["id"] == pid:
            if action == "yes":
                point["yes"] += 1
            elif action == "no":
                point["no"] += 1
                if point["no"] >= MIN_NO_TO_MARK_GONE:
                    points.remove(point)
            break

    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    await query.edit_message_text(f"üöì {point['desc']}\n‚úÖ {point['yes']}  ‚ùå {point['no']}")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.LOCATION, location_handler))
app.add_handler(MessageHandler(filters.Regex("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"), manual_add_handler))
app.add_handler(MessageHandler(filters.TEXT, media_handler))
app.add_handler(CallbackQueryHandler(vote_handler))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()
