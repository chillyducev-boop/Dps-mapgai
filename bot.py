from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
import json
from datetime import datetime, timedelta
import urllib.parse

BOT_TOKEN = os.environ.get("BOT_TOKEN")
PUBLISH_CHAT_ID = os.environ.get("PUBLISH_CHAT_ID")
MIN_NO_TO_MARK_GONE = int(os.environ.get("MIN_NO_TO_MARK_GONE"))
GONE_LIFETIME_MINUTES = int(os.environ.get("GONE_LIFETIME_MINUTES"))

DATA_FILE = "points.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        points = json.load(f)
else:
    points = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—â—É—é –∫–∞—Ä—Ç—É
def generate_overall_map_link():
    if not points:
        return "https://yandex.ru/maps/"
    addresses = [urllib.parse.quote(point['address']) for point in points if 'address' in point]
    return "https://yandex.ru/maps/?text=" + "%0A".join(addresses)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å")]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –î–ü–°:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –≥–µ–æ–∫–æ–¥, –Ω–æ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_location = update.message.location
    description = update.message.caption or "–î–ü–°"
    point_id = len(points) + 1
    expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ geocoder API, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {user_location.latitude}, {user_location.longitude}"

    new_point = {
        "id": point_id,
        "address": address,
        "desc": description,
        "yes": 1,
        "no": 0,
        "expire": expire_time.isoformat()
    }
    points.append(new_point)

    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
         InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç—É", callback_data=f"no_{point_id}")],
        [InlineKeyboardButton("üó∫ –û–±—â–∞—è –∫–∞—Ä—Ç–∞", url=generate_overall_map_link())]
    ]

    point_map_link = f"https://yandex.ru/maps/?text={urllib.parse.quote(address)}"

    await context.bot.send_message(
        chat_id=PUBLISH_CHAT_ID,
        text=f"üöì {description}\nüìç –¢–æ—á–∫–∞: {point_map_link}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
async def add_address_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text
    point_id = len(points) + 1
    expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)

    new_point = {
        "id": point_id,
        "address": address,
        "desc": "–î–ü–°",
        "yes": 1,
        "no": 0,
        "expire": expire_time.isoformat()
    }
    points.append(new_point)

    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
         InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç—É", callback_data=f"no_{point_id}")],
        [InlineKeyboardButton("üó∫ –û–±—â–∞—è –∫–∞—Ä—Ç–∞", url=generate_overall_map_link())]
    ]

    point_map_link = f"https://yandex.ru/maps/?text={urllib.parse.quote(address)}"

    await context.bot.send_message(
        chat_id=PUBLISH_CHAT_ID,
        text=f"üöì {new_point['desc']}\nüìç –¢–æ—á–∫–∞: {point_map_link}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É!")

# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, pid = query.data.split("_")
    pid = int(pid)

    for point in points:
        if point["id"] == pid:
            if action == "yes":
                point["yes"] += 1
            elif action == "no":
                point["no"] += 1
                if point["no"] >= MIN_NO_TO_MARK_GONE:
                    points.remove(point)
            break

    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    await query.edit_message_text(f"üöì {point.get('desc','–î–ü–°')}\n‚úÖ {point['yes']}  ‚ùå {point['no']}")

# –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.LOCATION, location_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler))
app.add_handler(MessageHandler(filters.Regex("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"), add_address_prompt))
app.add_handler(CallbackQueryHandler(vote_handler))

app.run_polling()
