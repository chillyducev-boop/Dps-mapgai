import os
import json
from datetime import datetime, timedelta
import urllib.parse
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

BOT_TOKEN = os.environ.get("BOT_TOKEN")
PUBLISH_CHAT_ID = os.environ.get("PUBLISH_CHAT_ID")
MIN_NO_TO_MARK_GONE = int(os.environ.get("MIN_NO_TO_MARK_GONE"))
GONE_LIFETIME_MINUTES = int(os.environ.get("GONE_LIFETIME_MINUTES"))

DATA_FILE = "points.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        points = json.load(f)
else:
    points = []

# –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É —Å —Ç–æ—á–∫–∞–º–∏
def generate_map_link():
    if not points:
        return "https://yandex.ru/maps"
    base = "https://yandex.ru/maps/?rtext="
    addresses = [urllib.parse.quote(point.get("address") or f"{point.get('lat','')},{point.get('lon','')}") for point in points]
    return base + "~".join(addresses)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å")]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –î–ü–°:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_location = update.message.location
    description = update.message.caption or "–î–ü–°"
    point_id = len(points) + 1
    expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)

    new_point = {
        "id": point_id,
        "desc": description,
        "lat": user_location.latitude,
        "lon": user_location.longitude,
        "yes": 1,
        "no": 0,
        "expire": expire_time.isoformat()
    }
    points.append(new_point)
    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    map_link = generate_map_link()
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
                 InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç—É", callback_data=f"no_{point_id}")]]
    await context.bot.send_message(chat_id=PUBLISH_CHAT_ID,
                                   text=f"üöì {description}\nüìç {map_link}",
                                   reply_markup=InlineKeyboardMarkup(keyboard))
    await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
async def add_address_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    context.user_data["awaiting_address"] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–∞–¥—Ä–µ—Å)
async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_address"):
        address = update.message.text
        point_id = len(points) + 1
        expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)

        new_point = {
            "id": point_id,
            "desc": "–î–ü–°",
            "address": address,
            "yes": 1,
            "no": 0,
            "expire": expire_time.isoformat()
        }
        points.append(new_point)
        with open(DATA_FILE, "w") as f:
            json.dump(points, f)

        map_link = generate_map_link()
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
                     InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç—É", callback_data=f"no_{point_id}")]]
        await context.bot.send_message(chat_id=PUBLISH_CHAT_ID,
                                       text=f"üöì {new_point['desc']}\nüìç {map_link}",
                                       reply_markup=InlineKeyboardMarkup(keyboard))
        await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É!")
        context.user_data["awaiting_address"] = False
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, pid = query.data.split("_")
    pid = int(pid)

    for point in points:
        if point["id"] == pid:
            if action == "yes":
                point["yes"] += 1
            elif action == "no":
                point["no"] += 1
                if point["no"] >= MIN_NO_TO_MARK_GONE:
                    points.remove(point)
            break
    with open(DATA_FILE, "w") as f:
        json.dump(points, f)
    await query.edit_message_text(f"üöì {point.get('desc','–î–ü–°')}\n‚úÖ {point['yes']}  ‚ùå {point['no']}")

# –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.LOCATION, location_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler))
app.add_handler(MessageHandler(filters.Regex("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"), add_address_prompt))
app.add_handler(CallbackQueryHandler(vote_handler))

app.run_polling()
