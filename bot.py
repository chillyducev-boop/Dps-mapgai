import os
import json
from datetime import datetime, timedelta
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLISH_CHAT_ID = os.getenv("PUBLISH_CHAT_ID")
MIN_NO_TO_MARK_GONE = int(os.getenv("MIN_NO_TO_MARK_GONE", 3))
GONE_LIFETIME_MINUTES = int(os.getenv("GONE_LIFETIME_MINUTES", 30))
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

DATA_FILE = "points.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        points = json.load(f)
else:
    points = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –º–µ—Ç–∫–∞–º–∏
def generate_map_url():
    if not points:
        return None
    pt_list = "~".join([f"{p['lon']},{p['lat']},pm2rdm" for p in points])
    return f"https://static-maps.yandex.ru/1.x/?apikey={YANDEX_API_KEY}&l=map&pt={pt_list}"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤—ã –≤–∏–¥–µ–ª–∏ –î–ü–°.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –î–ü–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º).")
    context.user_data["waiting_for_address"] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_address"):
        address = update.message.text
        context.user_data["waiting_for_address"] = False

        # –ì–µ–æ–∫–æ–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
        geocode_url = f"https://geocode-maps.yandex.ru/1.x/?apikey={YANDEX_API_KEY}&geocode={address}&format=json"
        resp = requests.get(geocode_url).json()
        try:
            pos = resp["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
            lon, lat = map(float, pos.split())
        except:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")
            return

        # –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫—É
        point_id = len(points) + 1
        expire_time = datetime.now() + timedelta(minutes=GONE_LIFETIME_MINUTES)
        new_point = {
            "id": point_id,
            "lat": lat,
            "lon": lon,
            "desc": address,
            "yes": 1,
            "no": 0,
            "expire": expire_time.isoformat()
        }
        points.append(new_point)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(DATA_FILE, "w") as f:
            json.dump(points, f)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        map_url = generate_map_url()

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –≤–∏–¥–µ–ª", callback_data=f"yes_{point_id}"),
             InlineKeyboardButton("‚ùå –£–∂–µ –Ω–µ—Ç—É", callback_data=f"no_{point_id}")]
        ]

        text_msg = f"üöì {address}\nüìç {lat}, {lon}"
        if map_url:
            text_msg += f"\n\n–ö–∞—Ä—Ç–∞: {map_url}"

        await context.bot.send_message(
            chat_id=PUBLISH_CHAT_ID,
            text=text_msg,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await update.message.reply_text("–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, pid = query.data.split("_")
    pid = int(pid)

    for point in points:
        if point["id"] == pid:
            if action == "yes":
                point["yes"] += 1
            elif action == "no":
                point["no"] += 1
                if point["no"] >= MIN_NO_TO_MARK_GONE:
                    points.remove(point)
            break

    with open(DATA_FILE, "w") as f:
        json.dump(points, f)

    await query.edit_message_text(f"üöì {point['desc']}\n‚úÖ {point['yes']}  ‚ùå {point['no']}")

# –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"), address_handler))
app.add_handler(MessageHandler(filters.TEXT, text_handler))
app.add_handler(CallbackQueryHandler(vote_handler))

app.run_polling()
